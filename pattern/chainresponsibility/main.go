/*
Применимость
* Когда программе нужно обрабатывать запросы несколькими способами, но не известно в какой последовательности, какие
конкретно запросы и какие обработчики для них понадобятся
* когда важно чтобы обработчики выполнялись один за другим в строгом порядке
* когда есть набор объектов, обрабатывать которые нужно динамически,- можем вмешаться в цепочку и переназначить порядок действий

+ уменьшение зависимости между клиентом и обработчиками
+ реализует принцип единственной ответственности (SRP)
+ реализует принцип открытости \ закрытости (OCP)

- запрос может остаться никем не обработанным
*/

package main

// client
// клиент может сформировать цепочку единожды
// или перестроить в зависимости от динамики программы

func getHospital() department {
	// 4-е финальное
	cashier := &cashier{}

	// 3-е
	medical := &medical{}
	medical.setNext(cashier)

	// 2-e
	doctor := &doctor{}
	doctor.setNext(medical)

	// первое звено
	reception := &reception{}
	reception.setNext(doctor)

	return reception
}

func main() {
	// работа госпитали будет начинаться со звена "ресепшен"
	hospital := getHospital()
	patient := &patient{}

	hospital.execute(patient)
}
