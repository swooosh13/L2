/*
определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.

Применимость:
* метод отделяет код производства продуктов от остального кода, который эти продукты использует.
* хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки

+ Избавляет класс от привязки к конкретным классам продуктов.
+ Выделяет код производства продуктов в одно место, упрощая поддержку кода.
+ Упрощает добавление новых продуктов в программу.
+ OCP

- привести к созданию больших параллельных иерархий классов,
	так как для каждого класса продукта надо создать свой подкласс создателя.
*/

package main

import "fmt"

// Computer интерфейс продукта
type Computer interface {
	GetType() string
	PrintDetails()
}

// Фабрика
func NewComputer(typeName string) Computer {
	switch typeName {
	case ServerType:
		return NewServer()
	case PersonalComputerType:
		return NewPersonalComputer()
	case LaptopType:
		return NewLaptop()
	default:
		fmt.Printf("%s Несуществующий тип объекта", typeName)
		return nil
	}
}