/*
Паттерн Стратегия предлагает определить семейство схожих алгоритмов,
которые часто изменяются или расширяются,
и вынести их в собственные классы, называемые стратегиями.

Применимость:
* Когда нужно использовать разные вариации какого-то алгоритма внутри одного объекта.
* Когда у вас есть множество похожих классов, отличающихся только некоторым поведением.
* Когда не хотите обнажать детали реализации алгоритмов для других классов

+ горячая замена алгоритмов на лету
+ изолирует код и данные алгосов от остальных классов
+ уход от наследования к делегированию
+ OCP

- усложняет прогу за счет доп. классов
- клиент должен знать разницу между стратегиями, чтобы подобрать нужную
*/

package main

var strategies = []RouteStrategy{
	&RoadStrategy{},
	&PublicTransportStrategy{},
	&WalkStrategy{},
}

func main() {
	start := 10
	end := 100

	nav := &Navigator{}
	for _, strategy := range strategies {
		nav.SetStrategy(strategy)
		nav.Route(start, end)
	}
}
